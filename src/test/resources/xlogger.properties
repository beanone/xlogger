# XLogger sample configuration file

# There are three types of xlogger configuration entries:
# 1. namespace binding: binds methods with a logging level. 
#	 You define a namespace using the syntax: 
#		xlogger(.ns).<ns>.<key>=<level>
#	 where 
#		<ns> is the namespace.
#		<key> is a key that is typically "public", "protected", 
#			"package", "private", "*". The "package" namespace 
#			is a special system reserved one that accepts 
#			package name as the key (see below).
#		<level> is a logging level, and can be "error", "warn",
#			"info", "debug", "trace" or "skip", case 
#			insensitive.
#		(.ns) indicates that you can define your own namespace 
#			with the prefix "xlogger.ns.". A prefix without the
#			(.ns) follows by a system namespace such as "method"
#			and "package". A custom user defined namespace is
#			prefixed with "xlogger.ns.".
# 2. namespace filter: defines what consists of the namespace.
#	 You can have more than one namespace filters for a given 
#	 namespace. All name space filters for the same namespace
#	 will be OR'd together.
#	 You define a namespace filter using the syntax:
#		filter.<ns>.<id>=<scope>,<value>
#	 where
#		<ns> is the namespace.
#		<id> is a filter id that must be unique within the 
#			namespace.
#		<scope> is the scope of the filter and could be 
#			"package", "class", or "method".
#		<value> is either package name, class name, or method 
#			name depends on the scope value.
# 3. argument render spec: defines the specification per how 
#	 argument of specific type should be rendered in a logging 
#	 message. All method arguments and result are rendered in 
#	 logging messages. By default they are all rendered using
#	 the toString() method of the argument. However, for some
#	 arguments, toString() may not be implemented, and for 
#	 others, it might be an expansive operation. 
#	 You define the argument spec using the syntax:
#		spec.<part>.<class>=<attributes>
#	where
#		<part> is the profile of the spec which is different 
#			This simply gives you finer control on how an 
#			an argument can be rendered when it is used in 
#			different methods. Leave it empty indicates that it
#			is the default profile. Suggested profile names
#			can be "verbose", "financial", etc.
#		<class> is the class type of the argument.
#		<attributes> is a comma delimited list of attributes 
#			of the rendering argument. When rendered, this is
#			the list of attributes to be rendered recursively. 

# There are three types of namespaces:
# 1. system reserved: such as "method", "package", and "exception".
#	 For the system reserved namespaces, you can only do binding. 
#	 Filter is not accepted.
# 2. user defined: you can define any namesspace different from 
#	 the system reserved. The user defined namespace allow one to
#	 easily categorize the the methods in an application to support
#	 proper logging. For example, you may define a namespace 
#	 "critical" using the key "xlogger.critical.public" to include 
#	 all public methods in a critical package and assign the INFO 
#	 logging level. 
# 3. system defined: such as "trivial", "domain", "persistence", 
#	 "client", and "config". 
#	 For system defined, you can do binding and filtering just list 
#	 a user defined. The only difference is that a system defined 
#	 has specific semantic meaning that is common to all applications. 
#	 For "trivial" is the name space for all trivial methods and by 
#	 default, it contains all getter and setter methods. The "domain"
#	 namespace includes all domain classes typical included in 
#	 packages names as "*.domain". The "persistence" namespace 
#	 includes all persistence implementation classes and the user 
#	 need to define the classes/packages that it includes. The 
#	 "client" namespace includes all client component classes that
#	 act as a client of some remote services. The "config" includes 
#	 all classes that is responsible for configuration.

# Default logging level for all methods with package level access
# By default, logging level for all methods is TRACE.
# One can override with setting for "xlogger.method.*"
xlogger.method.package=DEBUG

# Default logging level for all private methods
xlogger.method.private=SKIP

# Default logging for all public methods inside a package (sub-packages included)
xlogger.package.org.beanone.public=INFO

# Logging level for one type of exception. 
# By default, logging level for all exceptions is ERROR. 
# One can override with setting for "xlogger.exception.*"
# You can also setup the logger level for a specific exception
# through the xlogger API in code. The benefit of doing that
# is so that when the exception class or package is renamed,
# you do not have to update this configuration file, which simplifies 
# the maintenance of this configuration.
xlogger.exception.org.beanone.xlogger.mock.MockException=WARN

# Default for methods in the namespace "trivial". The trivial namespace is 
# a system namepace. By default, it includes all getters, and setters 
# regargless of the access level.
# Filters can be registered with a namespace through the xlogger API or
# in this configuration 
xlogger.ns.trivial.*=SKIP

# Default for methods in the namespace "client"
xlogger.ns.client.public=INFO

# Filters to register with the namespace "client"
# The downside of registering a filter in the configuration file is that
# when the source code is refactored, you have to update this configuration
# file accordingly. Thus, it might be preferred to configure the filters
# using the xlogger API in code, which simplifies the maintenance of this 
# configuration.
filter.client.1=package,org.beanone.xlogger.mock.client
filter.client.2=class,org.beanone.xlogger.mock2.client.SomeRestClient

# argument spec for MockBean defined in the default profile.
spec..org.beanone.xlogger.mock.MockArg=id
spec.verbose.org.beanone.xlogger.mock.MockArg=id,attribute
